(function ($, Drupal, drupalSettings) {
  Drupal.behaviors.fiveNineInit = {
    attach: function (context, settings) {
      $(document, context).once('fiveNineInit').each(function () {
        console.log(drupalSettings);
        $tenant = drupalSettings.five_nine_chat_block.tenant;
        $chat_title = drupalSettings.five_nine_chat_block.chat_title;
        $profiles = drupalSettings.five_nine_chat_block.profiles;
        $show_profiles = drupalSettings.five_nine_chat_block.show_profiles;
        $show_logo = drupalSettings.five_nine_chat_block.show_logo;
        $show_name_field = drupalSettings.five_nine_chat_block.show_name_field;
        $show_email_field = drupalSettings.five_nine_chat_block.show_email_field;
        $theme = drupalSettings.five_nine_chat_block.theme;
        $logo_url = drupalSettings.five_nine_chat_block.logo_url;
        console.log('profiles = ' + $profiles);
        var options = {
          "rootUrl": "https://app.five9.com/consoles/",
          "type": "chat",
          "title": $chat_title,
          "tenant": $tenant,
          "profiles": $profiles,
          "showProfiles": $show_profiles,
          "autostart": true,
          "theme": $theme,
          "logo": $logo_url,
          "fields": {
            "name": {
              "value": "",
              "show": $show_name_field,
              "label": "Name"
            },
            "email": {
              "value": "",
              "show": $show_email_field,
              "label": "Email"
            }
          }
        };
        console.log(options);
        Five9SocialWidget.addWidget(options);
      });
    }
  }
}(jQuery, Drupal, drupalSettings));
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
Drupal.debounce = function (func, wait, immediate) {
  var timeout;
  var result;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context = this;
    var later = function later() {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, debounce) {
  $.fn.drupalGetSummary = function () {
    var callback = this.data('summaryCallback');
    return this[0] && callback ? callback(this[0]).trim() : '';
  };
  $.fn.drupalSetSummary = function (callback) {
    var self = this;
    if (typeof callback !== 'function') {
      var val = callback;
      callback = function callback() {
        return val;
      };
    }
    return this.data('summaryCallback', callback).off('formUpdated.summary').on('formUpdated.summary', function () {
      self.trigger('summaryUpdated');
    }).trigger('summaryUpdated');
  };
  Drupal.behaviors.formSingleSubmit = {
    attach: function attach() {
      function onFormSubmit(e) {
        var $form = $(e.currentTarget);
        var formValues = $form.serialize();
        var previousValues = $form.attr('data-drupal-form-submit-last');
        if (previousValues === formValues) {
          e.preventDefault();
        } else {
          $form.attr('data-drupal-form-submit-last', formValues);
        }
      }
      $(once('form-single-submit', 'body')).on('submit.singleSubmit', 'form:not([method~="GET"])', onFormSubmit);
    }
  };
  function triggerFormUpdated(element) {
    $(element).trigger('formUpdated');
  }
  function fieldsList(form) {
    return [].map.call(form.querySelectorAll('[name][id]'), function (el) {
      return el.id;
    });
  }
  Drupal.behaviors.formUpdated = {
    attach: function attach(context) {
      var $context = $(context);
      var contextIsForm = $context.is('form');
      var $forms = $(once('form-updated', contextIsForm ? $context : $context.find('form')));
      var formFields;
      if ($forms.length) {
        $.makeArray($forms).forEach(function (form) {
          var events = 'change.formUpdated input.formUpdated ';
          var eventHandler = debounce(function (event) {
            triggerFormUpdated(event.target);
          }, 300);
          formFields = fieldsList(form).join(',');
          form.setAttribute('data-drupal-form-fields', formFields);
          $(form).on(events, eventHandler);
        });
      }
      if (contextIsForm) {
        formFields = fieldsList(context).join(',');
        var currentFields = $(context).attr('data-drupal-form-fields');
        if (formFields !== currentFields) {
          triggerFormUpdated(context);
        }
      }
    },
    detach: function detach(context, settings, trigger) {
      var $context = $(context);
      var contextIsForm = $context.is('form');
      if (trigger === 'unload') {
        once.remove('form-updated', contextIsForm ? $context : $context.find('form')).forEach(function (form) {
          form.removeAttribute('data-drupal-form-fields');
          $(form).off('.formUpdated');
        });
      }
    }
  };
  Drupal.behaviors.fillUserInfoFromBrowser = {
    attach: function attach(context, settings) {
      var userInfo = ['name', 'mail', 'homepage'];
      var $forms = $(once('user-info-from-browser', '[data-user-info-from-browser]'));
      if ($forms.length) {
        userInfo.forEach(function (info) {
          var $element = $forms.find("[name=".concat(info, "]"));
          var browserData = localStorage.getItem("Drupal.visitor.".concat(info));
          if (!$element.length) {
            return;
          }
          var emptyValue = $element[0].value === '';
          var defaultValue = $element.attr('data-drupal-default-value') === $element[0].value;
          if (browserData && (emptyValue || defaultValue)) {
            $element.each(function (index, item) {
              item.value = browserData;
            });
          }
        });
      }
      $forms.on('submit', function () {
        userInfo.forEach(function (info) {
          var $element = $forms.find("[name=".concat(info, "]"));
          if ($element.length) {
            localStorage.setItem("Drupal.visitor.".concat(info), $element[0].value);
          }
        });
      });
    }
  };
  var handleFragmentLinkClickOrHashChange = function handleFragmentLinkClickOrHashChange(e) {
    var url;
    if (e.type === 'click') {
      url = e.currentTarget.location ? e.currentTarget.location : e.currentTarget;
    } else {
      url = window.location;
    }
    var hash = url.hash.substr(1);
    if (hash) {
      var $target = $("#".concat(hash));
      $('body').trigger('formFragmentLinkClickOrHashChange', [$target]);
      setTimeout(function () {
        return $target.trigger('focus');
      }, 300);
    }
  };
  var debouncedHandleFragmentLinkClickOrHashChange = debounce(handleFragmentLinkClickOrHashChange, 300, true);
  $(window).on('hashchange.form-fragment', debouncedHandleFragmentLinkClickOrHashChange);
  $(document).on('click.form-fragment', 'a[href*="#"]', debouncedHandleFragmentLinkClickOrHashChange);
})(jQuery, Drupal, Drupal.debounce);;
/**
 * @file
 * Webform behaviors.
 */

(function ($, Drupal) {

  'use strict';

  // Trigger Drupal's attaching of behaviors after the page is
  // completely loaded.
  // @see https://stackoverflow.com/questions/37838430/detect-if-page-is-load-from-back-button
  // @see https://stackoverflow.com/questions/20899274/how-to-refresh-page-on-back-button-click/20899422#20899422
  var isChrome = (/chrom(e|ium)/.test(window.navigator.userAgent.toLowerCase()));
  if (isChrome) {
    // Track back button in navigation.
    // @see https://stackoverflow.com/questions/37838430/detect-if-page-is-load-from-back-button
    var backButton = false;
    if (window.performance) {
      var navEntries = window.performance.getEntriesByType('navigation');
      if (navEntries.length > 0 && navEntries[0].type === 'back_forward') {
        backButton = true;
      }
      else if (window.performance.navigation
        && window.performance.navigation.type === window.performance.navigation.TYPE_BACK_FORWARD) {
        backButton = true;
      }
    }

    // If the back button is pressed, delay Drupal's attaching of behaviors.
    if (backButton) {
      var attachBehaviors = Drupal.attachBehaviors;
      Drupal.attachBehaviors = function (context, settings) {
        setTimeout(function (context, settings) {
          attachBehaviors(context, settings);
        }, 300);
      };
    }
  }

})(jQuery, Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal) {
  var states = {
    postponed: []
  };
  Drupal.states = states;
  function invert(a, invertState) {
    return invertState && typeof a !== 'undefined' ? !a : a;
  }
  function _compare2(a, b) {
    if (a === b) {
      return typeof a === 'undefined' ? a : true;
    }
    return typeof a === 'undefined' || typeof b === 'undefined';
  }
  function ternary(a, b) {
    if (typeof a === 'undefined') {
      return b;
    }
    if (typeof b === 'undefined') {
      return a;
    }
    return a && b;
  }
  Drupal.behaviors.states = {
    attach: function attach(context, settings) {
      var $states = $(context).find('[data-drupal-states]');
      var il = $states.length;
      var _loop = function _loop(i) {
        var config = JSON.parse($states[i].getAttribute('data-drupal-states'));
        Object.keys(config || {}).forEach(function (state) {
          new states.Dependent({
            element: $($states[i]),
            state: states.State.sanitize(state),
            constraints: config[state]
          });
        });
      };
      for (var i = 0; i < il; i++) {
        _loop(i);
      }
      while (states.postponed.length) {
        states.postponed.shift()();
      }
    }
  };
  states.Dependent = function (args) {
    var _this = this;
    $.extend(this, {
      values: {},
      oldValue: null
    }, args);
    this.dependees = this.getDependees();
    Object.keys(this.dependees || {}).forEach(function (selector) {
      _this.initializeDependee(selector, _this.dependees[selector]);
    });
  };
  states.Dependent.comparisons = {
    RegExp: function RegExp(reference, value) {
      return reference.test(value);
    },
    Function: function Function(reference, value) {
      return reference(value);
    },
    Number: function Number(reference, value) {
      return typeof value === 'string' ? _compare2(reference.toString(), value) : _compare2(reference, value);
    }
  };
  states.Dependent.prototype = {
    initializeDependee: function initializeDependee(selector, dependeeStates) {
      var _this2 = this;
      this.values[selector] = {};
      Object.keys(dependeeStates).forEach(function (i) {
        var state = dependeeStates[i];
        if ($.inArray(state, dependeeStates) === -1) {
          return;
        }
        state = states.State.sanitize(state);
        _this2.values[selector][state.name] = null;
        $(selector).on("state:".concat(state), {
          selector: selector,
          state: state
        }, function (e) {
          _this2.update(e.data.selector, e.data.state, e.value);
        });
        new states.Trigger({
          selector: selector,
          state: state
        });
      });
    },
    compare: function compare(reference, selector, state) {
      var value = this.values[selector][state.name];
      if (reference.constructor.name in states.Dependent.comparisons) {
        return states.Dependent.comparisons[reference.constructor.name](reference, value);
      }
      return _compare2(reference, value);
    },
    update: function update(selector, state, value) {
      if (value !== this.values[selector][state.name]) {
        this.values[selector][state.name] = value;
        this.reevaluate();
      }
    },
    reevaluate: function reevaluate() {
      var value = this.verifyConstraints(this.constraints);
      if (value !== this.oldValue) {
        this.oldValue = value;
        value = invert(value, this.state.invert);
        this.element.trigger({
          type: "state:".concat(this.state),
          value: value,
          trigger: true
        });
      }
    },
    verifyConstraints: function verifyConstraints(constraints, selector) {
      var result;
      if ($.isArray(constraints)) {
        var hasXor = $.inArray('xor', constraints) === -1;
        var len = constraints.length;
        for (var i = 0; i < len; i++) {
          if (constraints[i] !== 'xor') {
            var constraint = this.checkConstraints(constraints[i], selector, i);
            if (constraint && (hasXor || result)) {
              return hasXor;
            }
            result = result || constraint;
          }
        }
      } else if ($.isPlainObject(constraints)) {
        for (var n in constraints) {
          if (constraints.hasOwnProperty(n)) {
            result = ternary(result, this.checkConstraints(constraints[n], selector, n));
            if (result === false) {
              return false;
            }
          }
        }
      }
      return result;
    },
    checkConstraints: function checkConstraints(value, selector, state) {
      if (typeof state !== 'string' || /[0-9]/.test(state[0])) {
        state = null;
      } else if (typeof selector === 'undefined') {
        selector = state;
        state = null;
      }
      if (state !== null) {
        state = states.State.sanitize(state);
        return invert(this.compare(value, selector, state), state.invert);
      }
      return this.verifyConstraints(value, selector);
    },
    getDependees: function getDependees() {
      var cache = {};
      var _compare = this.compare;
      this.compare = function (reference, selector, state) {
        (cache[selector] || (cache[selector] = [])).push(state.name);
      };
      this.verifyConstraints(this.constraints);
      this.compare = _compare;
      return cache;
    }
  };
  states.Trigger = function (args) {
    $.extend(this, args);
    if (this.state in states.Trigger.states) {
      this.element = $(this.selector);
      if (!this.element.data("trigger:".concat(this.state))) {
        this.initialize();
      }
    }
  };
  states.Trigger.prototype = {
    initialize: function initialize() {
      var _this3 = this;
      var trigger = states.Trigger.states[this.state];
      if (typeof trigger === 'function') {
        trigger.call(window, this.element);
      } else {
        Object.keys(trigger || {}).forEach(function (event) {
          _this3.defaultTrigger(event, trigger[event]);
        });
      }
      this.element.data("trigger:".concat(this.state), true);
    },
    defaultTrigger: function defaultTrigger(event, valueFn) {
      var oldValue = valueFn.call(this.element);
      this.element.on(event, $.proxy(function (e) {
        var value = valueFn.call(this.element, e);
        if (oldValue !== value) {
          this.element.trigger({
            type: "state:".concat(this.state),
            value: value,
            oldValue: oldValue
          });
          oldValue = value;
        }
      }, this));
      states.postponed.push($.proxy(function () {
        this.element.trigger({
          type: "state:".concat(this.state),
          value: oldValue,
          oldValue: null
        });
      }, this));
    }
  };
  states.Trigger.states = {
    empty: {
      keyup: function keyup() {
        return this.val() === '';
      }
    },
    checked: {
      change: function change() {
        var checked = false;
        this.each(function () {
          checked = $(this).prop('checked');
          return !checked;
        });
        return checked;
      }
    },
    value: {
      keyup: function keyup() {
        if (this.length > 1) {
          return this.filter(':checked').val() || false;
        }
        return this.val();
      },
      change: function change() {
        if (this.length > 1) {
          return this.filter(':checked').val() || false;
        }
        return this.val();
      }
    },
    collapsed: {
      collapsed: function collapsed(e) {
        return typeof e !== 'undefined' && 'value' in e ? e.value : !this.is('[open]');
      }
    }
  };
  states.State = function (state) {
    this.pristine = state;
    this.name = state;
    var process = true;
    do {
      while (this.name.charAt(0) === '!') {
        this.name = this.name.substring(1);
        this.invert = !this.invert;
      }
      if (this.name in states.State.aliases) {
        this.name = states.State.aliases[this.name];
      } else {
        process = false;
      }
    } while (process);
  };
  states.State.sanitize = function (state) {
    if (state instanceof states.State) {
      return state;
    }
    return new states.State(state);
  };
  states.State.aliases = {
    enabled: '!disabled',
    invisible: '!visible',
    invalid: '!valid',
    untouched: '!touched',
    optional: '!required',
    filled: '!empty',
    unchecked: '!checked',
    irrelevant: '!relevant',
    expanded: '!collapsed',
    open: '!collapsed',
    closed: 'collapsed',
    readwrite: '!readonly'
  };
  states.State.prototype = {
    invert: false,
    toString: function toString() {
      return this.name;
    }
  };
  var $document = $(document);
  $document.on('state:disabled', function (e) {
    if (e.trigger) {
      $(e.target).prop('disabled', e.value).closest('.js-form-item, .js-form-submit, .js-form-wrapper').toggleClass('form-disabled', e.value).find('select, input, textarea').prop('disabled', e.value);
    }
  });
  $document.on('state:required', function (e) {
    if (e.trigger) {
      if (e.value) {
        var label = "label".concat(e.target.id ? "[for=".concat(e.target.id, "]") : '');
        var $label = $(e.target).attr({
          required: 'required',
          'aria-required': 'true'
        }).closest('.js-form-item, .js-form-wrapper').find(label);
        if (!$label.hasClass('js-form-required').length) {
          $label.addClass('js-form-required form-required');
        }
      } else {
        $(e.target).removeAttr('required aria-required').closest('.js-form-item, .js-form-wrapper').find('label.js-form-required').removeClass('js-form-required form-required');
      }
    }
  });
  $document.on('state:visible', function (e) {
    if (e.trigger) {
      $(e.target).closest('.js-form-item, .js-form-submit, .js-form-wrapper').toggle(e.value);
    }
  });
  $document.on('state:checked', function (e) {
    if (e.trigger) {
      $(e.target).prop('checked', e.value);
    }
  });
  $document.on('state:collapsed', function (e) {
    if (e.trigger) {
      if ($(e.target).is('[open]') === e.value) {
        $(e.target).find('> summary').trigger('click');
      }
    }
  });
})(jQuery, Drupal);;
/**
 * @file
 * JavaScript behaviors for custom webform #states.
 */

(function ($, Drupal) {

  'use strict';

  Drupal.webform = Drupal.webform || {};
  Drupal.webform.states = Drupal.webform.states || {};
  Drupal.webform.states.slideDown = Drupal.webform.states.slideDown || {};
  Drupal.webform.states.slideDown.duration = 'slow';
  Drupal.webform.states.slideUp = Drupal.webform.states.slideUp || {};
  Drupal.webform.states.slideUp.duration = 'fast';

  /* ************************************************************************ */
  // jQuery functions.
  /* ************************************************************************ */

  /**
   * Check if an element has a specified data attribute.
   *
   * @param {string} data
   *   The data attribute name.
   *
   * @return {boolean}
   *   TRUE if an element has a specified data attribute.
   */
  $.fn.hasData = function (data) {
    return (typeof this.data(data) !== 'undefined');
  };

  /**
   * Check if element is within the webform or not.
   *
   * @return {boolean}
   *   TRUE if element is within the webform.
   */
  $.fn.isWebform = function () {
    return $(this).closest('form.webform-submission-form, form[id^="webform"], form[data-is-webform]').length ? true : false;
  };

  /**
   * Check if element is to be treated as a webform element.
   *
   * @return {boolean}
   *   TRUE if element is to be treated as a webform element.
   */
  $.fn.isWebformElement = function () {
    return ($(this).isWebform() || $(this).closest('[data-is-webform-element]').length) ? true : false;
  };

  /* ************************************************************************ */
  // Trigger.
  /* ************************************************************************ */

  // The change event is triggered by cut-n-paste and select menus.
  // Issue #2445271: #states element empty check not triggered on mouse
  // based paste.
  // @see https://www.drupal.org/node/2445271
  Drupal.states.Trigger.states.empty.change = function change() {
    return this.val() === '';
  };

  /* ************************************************************************ */
  // Dependents.
  /* ************************************************************************ */

  // Apply solution included in #1962800 patch.
  // Issue #1962800: Form #states not working with literal integers as
  // values in IE11.
  // @see https://www.drupal.org/project/drupal/issues/1962800
  // @see https://www.drupal.org/files/issues/core-states-not-working-with-integers-ie11_1962800_46.patch
  //
  // This issue causes pattern, less than, and greater than support to break.
  // @see https://www.drupal.org/project/webform/issues/2981724
  var states = Drupal.states;
  Drupal.states.Dependent.prototype.compare = function compare(reference, selector, state) {
    var value = this.values[selector][state.name];

    var name = reference.constructor.name;
    if (!name) {
      name = $.type(reference);

      name = name.charAt(0).toUpperCase() + name.slice(1);
    }
    if (name in states.Dependent.comparisons) {
      return states.Dependent.comparisons[name](reference, value);
    }

    if (reference.constructor.name in states.Dependent.comparisons) {
      return states.Dependent.comparisons[reference.constructor.name](reference, value);
    }

    return _compare2(reference, value);
  };
  function _compare2(a, b) {
    if (a === b) {
      return typeof a === 'undefined' ? a : true;
    }

    return typeof a === 'undefined' || typeof b === 'undefined';
  }

  // Adds pattern, less than, and greater than support to #state API.
  // @see http://drupalsun.com/julia-evans/2012/03/09/extending-form-api-states-regular-expressions
  Drupal.states.Dependent.comparisons.Object = function (reference, value) {
    if ('pattern' in reference) {
      return (new RegExp(reference['pattern'])).test(value);
    }
    else if ('!pattern' in reference) {
      return !((new RegExp(reference['!pattern'])).test(value));
    }
    else if ('less' in reference) {
      return (value !== '' && parseFloat(reference['less']) > parseFloat(value));
    }
    else if ('less_equal' in reference) {
      return (value !== '' && parseFloat(reference['less_equal']) >= parseFloat(value));
    }
    else if ('greater' in reference) {
      return (value !== '' && parseFloat(reference['greater']) < parseFloat(value));
    }
    else if ('greater_equal' in reference) {
      return (value !== '' && parseFloat(reference['greater_equal']) <= parseFloat(value));
    }
    else if ('between' in reference || '!between' in reference) {
      if (value === '') {
        return false;
      }

      var between = reference['between'] || reference['!between'];
      var betweenParts = between.split(':');
      var greater = betweenParts[0];
      var less = (typeof betweenParts[1] !== 'undefined') ? betweenParts[1] : null;
      var isGreaterThan = (greater === null || greater === '' || parseFloat(value) >= parseFloat(greater));
      var isLessThan = (less === null || less === '' || parseFloat(value) <= parseFloat(less));
      var result = (isGreaterThan && isLessThan);
      return (reference['!between']) ? !result : result;
    }
    else {
      return reference.indexOf(value) !== false;
    }
  };

  /* ************************************************************************ */
  // States events.
  /* ************************************************************************ */

  var $document = $(document);

  $document.on('state:required', function (e) {
    if (e.trigger && $(e.target).isWebformElement()) {
      var $target = $(e.target);
      // Fix #required file upload.
      // @see Issue #2860529: Conditional required File upload field don't work.
      toggleRequired($target.find('input[type="file"]'), e.value);

      // Fix #required for radios and likert.
      // @see Issue #2856795: If radio buttons are required but not filled form is nevertheless submitted.
      if ($target.is('.js-form-type-radios, .js-form-type-webform-radios-other, .js-webform-type-radios, .js-webform-type-webform-radios-other, .js-webform-type-webform-entity-radios, .webform-likert-table')) {
        $target.toggleClass('required', e.value);
        toggleRequired($target.find('input[type="radio"]'), e.value);
      }

      // Fix #required for checkboxes.
      // @see Issue #2938414: Checkboxes don't support #states required.
      // @see checkboxRequiredhandler
      if ($target.is('.js-form-type-checkboxes, .js-form-type-webform-checkboxes-other, .js-webform-type-checkboxes, .js-webform-type-webform-checkboxes-other')) {
        $target.toggleClass('required', e.value);
        var $checkboxes = $target.find('input[type="checkbox"]');
        if (e.value) {
          // Add event handler.
          $checkboxes.on('click', statesCheckboxesRequiredEventHandler);
          // Initialize and add required attribute.
          checkboxesRequired($target);
        }
        else {
          // Remove event handler.
          $checkboxes.off('click', statesCheckboxesRequiredEventHandler);
          // Remove required attribute.
          toggleRequired($checkboxes, false);
        }
      }

      // Fix #required for tableselect.
      // @see Issue #3212581: Table select does not trigger client side validation
      if ($target.is('.js-webform-tableselect')) {
        $target.toggleClass('required', e.value);
        var isMultiple = $target.is('[multiple]');
        if (isMultiple) {
          // Checkboxes.
          var $tbody = $target.find('tbody');
          var $checkboxes = $tbody.find('input[type="checkbox"]');
          copyRequireMessage($target, $checkboxes);
          if (e.value) {
            $checkboxes.on('click change', statesCheckboxesRequiredEventHandler);
            checkboxesRequired($tbody);
          }
          else {
            $checkboxes.off('click change ', statesCheckboxesRequiredEventHandler);
            toggleRequired($tbody, false);
          }
        }
        else {
          // Radios.
          var $radios = $target.find('input[type="radio"]');
          copyRequireMessage($target, $radios);
          toggleRequired($radios, e.value);
        }
      }

      // Fix required label for elements without the for attribute.
      // @see Issue #3145300: Conditional Visible Select Other not working.
      if ($target.is('.js-form-type-webform-select-other, .js-webform-type-webform-select-other')) {
        var $select = $target.find('select');
        toggleRequired($select, e.value);
        copyRequireMessage($target, $select);
      }
      if ($target.find('> label:not([for])').length) {
        $target.find('> label').toggleClass('js-form-required form-required', e.value);
      }

      // Fix required label for checkboxes and radios.
      // @see Issue #2938414: Checkboxes don't support #states required
      // @see Issue #2731991: Setting required on radios marks all options required.
      // @see Issue #2856315: Conditional Logic - Requiring Radios in a Fieldset.
      // Fix #required for fieldsets.
      // @see Issue #2977569: Hidden fieldsets that become visible with conditional logic cannot be made required.
      if ($target.is('.js-webform-type-radios, .js-webform-type-checkboxes, fieldset')) {
        $target.find('legend span.fieldset-legend:not(.visually-hidden)').toggleClass('js-form-required form-required', e.value);
      }

      // Issue #2986017: Fieldsets shouldn't have required attribute.
      if ($target.is('fieldset')) {
        $target.removeAttr('required aria-required');
      }
    }
  });

  $document.on('state:checked', function (e) {
    if (e.trigger) {
      $(e.target).trigger('change');
    }
  });

  $document.on('state:readonly', function (e) {
    if (e.trigger && $(e.target).isWebformElement()) {
      $(e.target).prop('readonly', e.value).closest('.js-form-item, .js-form-wrapper').toggleClass('webform-readonly', e.value).find('input, textarea').prop('readonly', e.value);

      // Trigger webform:readonly.
      $(e.target).trigger('webform:readonly')
        .find('select, input, textarea, button').trigger('webform:readonly');
    }
  });

  $document.on('state:visible state:visible-slide', function (e) {
    if (e.trigger && $(e.target).isWebformElement()) {
      if (e.value) {
        $(':input', e.target).addBack().each(function () {
          restoreValueAndRequired(this);
          triggerEventHandlers(this);
        });
      }
      else {
        // @see https://www.sitepoint.com/jquery-function-clear-form-data/
        $(':input', e.target).addBack().each(function () {
          backupValueAndRequired(this);
          clearValueAndRequired(this);
          triggerEventHandlers(this);
        });
      }
    }
  });

  $document.on('state:visible-slide', function (e) {
    if (e.trigger && $(e.target).isWebformElement()) {
      var effect = e.value ? 'slideDown' : 'slideUp';
      var duration = Drupal.webform.states[effect].duration;
      $(e.target).closest('.js-form-item, .js-form-submit, .js-form-wrapper')[effect](duration);
    }
  });
  Drupal.states.State.aliases['invisible-slide'] = '!visible-slide';

  $document.on('state:disabled', function (e) {
    if (e.trigger && $(e.target).isWebformElement()) {
      // Make sure disabled property is set before triggering webform:disabled.
      // Copied from: core/misc/states.js
      $(e.target)
        .prop('disabled', e.value)
        .closest('.js-form-item, .js-form-submit, .js-form-wrapper').toggleClass('form-disabled', e.value)
        .find('select, input, textarea, button').prop('disabled', e.value);

      // Never disable hidden file[fids] because the existing values will
      // be completely lost when the webform is submitted.
      var fileElements = $(e.target)
        .find(':input[type="hidden"][name$="[fids]"]');
      if (fileElements.length) {
        // Remove 'disabled' attribute from fieldset which will block
        // all disabled elements from being submitted.
        if ($(e.target).is('fieldset')) {
          $(e.target).prop('disabled', false);
        }
        fileElements.removeAttr('disabled');
      }

      // Trigger webform:disabled.
      $(e.target).trigger('webform:disabled')
        .find('select, input, textarea, button').trigger('webform:disabled');
    }
  });

  /* ************************************************************************ */
  // Behaviors.
  /* ************************************************************************ */

  /**
   * Adds HTML5 validation to required checkboxes.
   *
   * @type {Drupal~behavior}
   *
   * @see https://www.drupal.org/project/webform/issues/3068998
   */
  Drupal.behaviors.webformCheckboxesRequired = {
    attach: function (context) {
      $('.js-form-type-checkboxes.required, .js-form-type-webform-checkboxes-other.required, .js-webform-type-checkboxes.required, .js-webform-type-webform-checkboxes-other.required, .js-webform-type-webform-radios-other.checkboxes', context)
        .once('webform-checkboxes-required')
        .each(function () {
          var $element = $(this);
          $element.find('input[type="checkbox"]').on('click', statesCheckboxesRequiredEventHandler);
          setTimeout(function () {checkboxesRequired($element);});
        });
    }
  };

  /**
   * Adds HTML5 validation to required radios.
   *
   * @type {Drupal~behavior}
   *
   * @see https://www.drupal.org/project/webform/issues/2856795
   */
  Drupal.behaviors.webformRadiosRequired = {
    attach: function (context) {
      $('.js-form-type-radios, .js-form-type-webform-radios-other, .js-webform-type-radios, .js-webform-type-webform-radios-other, .js-webform-type-webform-entity-radios, .js-webform-type-webform-scale', context)
        .once('webform-radios-required')
        .each(function () {
          var $element = $(this);
          setTimeout(function () {radiosRequired($element);});
        });
    }
  };

 /**
   * Adds HTML5 validation to required table select.
   *
   * @type {Drupal~behavior}
   *
   * @see https://www.drupal.org/project/webform/issues/2856795
   */
  Drupal.behaviors.webformTableSelectRequired = {
    attach: function (context) {
      $('.js-webform-tableselect.required', context)
        .once('webform-tableselect-required')
        .each(function () {
          var $element = $(this);
          var $tbody = $element.find('tbody');
          var isMultiple = $element.is('[multiple]');

          if (isMultiple) {
            // Check all checkbox triggers checkbox 'change' event on
            // select and deselect all.
            // @see Drupal.tableSelect
            $tbody.find('input[type="checkbox"]').on('click change', function () {
              checkboxesRequired($tbody);
            });
          }

          setTimeout(function () {
            isMultiple ? checkboxesRequired($tbody) : radiosRequired($element);
          });
        });
    }
  };

  /**
   * Add HTML5 multiple checkboxes required validation.
   *
   * @param {jQuery} $element
   *   An jQuery object containing HTML5 radios.
   *
   * @see https://stackoverflow.com/a/37825072/145846
   */
  function checkboxesRequired($element) {
    var $firstCheckbox = $element.find('input[type="checkbox"]').first();
    var isChecked = $element.find('input[type="checkbox"]').is(':checked');
    toggleRequired($firstCheckbox, !isChecked);
    copyRequireMessage($element, $firstCheckbox);
  }

  /**
   * Add HTML5 radios required validation.
   *
   * @param {jQuery} $element
   *   An jQuery object containing HTML5 radios.
   *
   * @see https://www.drupal.org/project/webform/issues/2856795
   */
  function radiosRequired($element) {
    var $radios = $element.find('input[type="radio"]');
    var isRequired = $element.hasClass('required');
    toggleRequired($radios, isRequired);
    copyRequireMessage($element, $radios);
  }

  /* ************************************************************************ */
  // Event handlers.
  /* ************************************************************************ */

  /**
   * Trigger #states API HTML5 multiple checkboxes required validation.
   *
   * @see https://stackoverflow.com/a/37825072/145846
   */
  function statesCheckboxesRequiredEventHandler() {
    var $element = $(this).closest('.js-webform-type-checkboxes, .js-webform-type-webform-checkboxes-other');
    checkboxesRequired($element);
  }

  /**
   * Trigger an input's event handlers.
   *
   * @param {element} input
   *   An input.
   */
  function triggerEventHandlers(input) {
    var $input = $(input);
    var type = input.type;
    var tag = input.tagName.toLowerCase();
    // Add 'webform.states' as extra parameter to event handlers.
    // @see Drupal.behaviors.webformUnsaved
    var extraParameters = ['webform.states'];
    if (type === 'checkbox' || type === 'radio') {
      $input
        .trigger('change', extraParameters)
        .trigger('blur', extraParameters);
    }
    else if (tag === 'select') {
      // Do not trigger the onchange event for Address element's country code
      // when it is initialized.
      // @see \Drupal\address\Element\Country
      if ($input.closest('.webform-type-address').length) {
        if (!$input.data('webform-states-address-initialized')
          && $input.attr('autocomplete') === 'country'
          && $input.val() === $input.find("option[selected]").attr('value')) {
          return;
        }
        $input.data('webform-states-address-initialized', true);
      }

      $input
        .trigger('change', extraParameters)
        .trigger('blur', extraParameters);
    }
    else if (type !== 'submit' && type !== 'button' && type !== 'file') {
      // Make sure input mask is removed and then reset when value is restored.
      // @see https://www.drupal.org/project/webform/issues/3124155
      // @see https://www.drupal.org/project/webform/issues/3202795
      var hasInputMask = ($.fn.inputmask && $input.hasClass('js-webform-input-mask'));
      hasInputMask && $input.inputmask('remove');

      $input
        .trigger('input', extraParameters)
        .trigger('change', extraParameters)
        .trigger('keydown', extraParameters)
        .trigger('keyup', extraParameters)
        .trigger('blur', extraParameters);

      hasInputMask && $input.inputmask();
    }
  }

  /* ************************************************************************ */
  // Backup and restore value functions.
  /* ************************************************************************ */

  /**
   * Backup an input's current value and required attribute
   *
   * @param {element} input
   *   An input.
   */
  function backupValueAndRequired(input) {
    var $input = $(input);
    var type = input.type;
    var tag = input.tagName.toLowerCase(); // Normalize case.

    // Backup required.
    if ($input.prop('required') && !$input.hasData('webform-required')) {
      $input.data('webform-required', true);
    }

    // Backup value.
    if (!$input.hasData('webform-value')) {
      if (type === 'checkbox' || type === 'radio') {
        $input.data('webform-value', $input.prop('checked'));
      }
      else if (tag === 'select') {
        var values = [];
        $input.find('option:selected').each(function (i, option) {
          values[i] = option.value;
        });
        $input.data('webform-value', values);
      }
      else if (type !== 'submit' && type !== 'button') {
        $input.data('webform-value', input.value);
      }
    }
  }

  /**
   * Restore an input's value and required attribute.
   *
   * @param {element} input
   *   An input.
   */
  function restoreValueAndRequired(input) {
    var $input = $(input);

    // Restore value.
    var value = $input.data('webform-value');
    if (typeof value !== 'undefined') {
      var type = input.type;
      var tag = input.tagName.toLowerCase(); // Normalize case.

      if (type === 'checkbox' || type === 'radio') {
        $input.prop('checked', value);
      }
      else if (tag === 'select') {
        $.each(value, function (i, option_value) {
          // Prevent "Syntax error, unrecognized expression" error by
          // escaping single quotes.
          // @see https://forum.jquery.com/topic/escape-characters-prior-to-using-selector
          option_value = option_value.replace(/'/g, "\\\'");
          $input.find("option[value='" + option_value + "']").prop('selected', true);
        });
      }
      else if (type !== 'submit' && type !== 'button') {
        input.value = value;
      }
      $input.removeData('webform-value');
    }

    // Restore required.
    var required = $input.data('webform-required');
    if (typeof required !== 'undefined') {
      if (required) {
        $input.prop('required', true);
      }
      $input.removeData('webform-required');
    }
  }

  /**
   * Clear an input's value and required attributes.
   *
   * @param {element} input
   *   An input.
   */
  function clearValueAndRequired(input) {
    var $input = $(input);

    // Check for #states no clear attribute.
    // @see https://css-tricks.com/snippets/jquery/make-an-jquery-hasattr/
    if ($input.closest('[data-webform-states-no-clear]').length) {
      return;
    }

    // Clear value.
    var type = input.type;
    var tag = input.tagName.toLowerCase(); // Normalize case.
    if (type === 'checkbox' || type === 'radio') {
      $input.prop('checked', false);
    }
    else if (tag === 'select') {
      if ($input.find('option[value=""]').length) {
        $input.val('');
      }
      else {
        input.selectedIndex = -1;
      }
    }
    else if (type !== 'submit' && type !== 'button') {
      input.value = (type === 'color') ? '#000000' : '';
    }

    // Clear required.
    $input.prop('required', false);
  }

  /* ************************************************************************ */
  // Helper functions.
  /* ************************************************************************ */

  /**
   * Toggle an input's required attributes.
   *
   * @param {element} $input
   *   An input.
   * @param {boolean} required
   *   Is input required.
   */
  function toggleRequired($input, required) {
    var isCheckboxOrRadio = ($input.attr('type') === 'radio' || $input.attr('type') === 'checkbox');
    if (required) {
      if (isCheckboxOrRadio) {
        $input.attr({'required': 'required'});
      }
      else {
        $input.attr({'required': 'required', 'aria-required': 'true'});
      }
    }
    else {
      if (isCheckboxOrRadio) {
        $input.removeAttr('required');
      }
      else {
        $input.removeAttr('required aria-required');
      }
    }
  }

  /**
   * Copy the clientside_validation.module's message.
   *
   * @param {jQuery} $source
   *   The source element.
   * @param {jQuery} $destination
   *   The destination element.
   */
  function copyRequireMessage($source, $destination) {
    if ($source.attr('data-msg-required')) {
      $destination.attr('data-msg-required', $source.attr('data-msg-required'));
    }
  }

})(jQuery, Drupal);
;
/**
 * @file
 * JavaScript behaviors for webforms.
 */

(function ($, Drupal) {

  'use strict';

  /**
   * Remove single submit event listener.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches the behavior for removing single submit event listener.
   *
   * @see Drupal.behaviors.formSingleSubmit
   */
  Drupal.behaviors.webformRemoveFormSingleSubmit = {
    attach: function attach() {
      function onFormSubmit(e) {
        var $form = $(e.currentTarget);
        $form.removeAttr('data-drupal-form-submit-last');
      }
      $('body')
        .once('webform-single-submit')
        .on('submit.singleSubmit', 'form.webform-remove-single-submit', onFormSubmit);
    }
  };

  /**
   * Prevent webform autosubmit on wizard pages.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches the behavior for disabling webform autosubmit.
   *   Wizard pages need to be progressed with the Previous or Next buttons,
   *   not by pressing Enter.
   */
  Drupal.behaviors.webformDisableAutoSubmit = {
    attach: function (context) {
      // Not using context so that inputs loaded via Ajax will have autosubmit
      // disabled.
      // @see http://stackoverflow.com/questions/11235622/jquery-disable-form-submit-on-enter
      $('.js-webform-disable-autosubmit input')
        .not(':button, :submit, :reset, :image, :file')
        .once('webform-disable-autosubmit')
        .on('keyup keypress', function (e) {
          if (e.which === 13) {
            e.preventDefault();
            return false;
          }
        });
    }
  };

  /**
   * Custom required and pattern validation error messages.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches the behavior for the webform custom required and pattern
   *   validation error messages.
   *
   * @see http://stackoverflow.com/questions/5272433/html5-form-required-attribute-set-custom-validation-message
   **/
  Drupal.behaviors.webformRequiredError = {
    attach: function (context) {
      $(context).find(':input[data-webform-required-error], :input[data-webform-pattern-error]').once('webform-required-error')
        .on('invalid', function () {
          this.setCustomValidity('');
          if (this.valid) {
            return;
          }

          if (this.validity.patternMismatch && $(this).attr('data-webform-pattern-error')) {
            this.setCustomValidity($(this).attr('data-webform-pattern-error'));
          }
          else if (this.validity.valueMissing && $(this).attr('data-webform-required-error')) {
            this.setCustomValidity($(this).attr('data-webform-required-error'));
          }
        })
        .on('input change', function () {
          // Find all related elements by name and reset custom validity.
          // This specifically applies to required radios and checkboxes.
          var name = $(this).attr('name');
          $(this.form).find(':input[name="' + name + '"]').each(function () {
            this.setCustomValidity('');
          });
        });
    }
  };

  // When #state:required is triggered we need to reset the target elements
  // custom validity.
  $(document).on('state:required', function (e) {
    $(e.target).filter('[data-webform-required-error]')
      .each(function () {this.setCustomValidity('');});
  });

})(jQuery, Drupal);
;
/**
 * @file
 * JavaScript behaviors for details element.
 */

(function ($, Drupal) {

  'use strict';

  // Determine if local storage exists and is enabled.
  // This approach is copied from Modernizr.
  // @see https://github.com/Modernizr/Modernizr/blob/c56fb8b09515f629806ca44742932902ac145302/modernizr.js#L696-731
  var hasLocalStorage = (function () {
    try {
      localStorage.setItem('webform', 'webform');
      localStorage.removeItem('webform');
      return true;
    }
    catch (e) {
      return false;
    }
  }());

  /**
   * Attach handler to save details open/close state.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.webformDetailsSave = {
    attach: function (context) {
      if (!hasLocalStorage) {
        return;
      }

      // Summary click event handler.
      $('details > summary', context).once('webform-details-summary-save').on('click', function () {
        var $details = $(this).parent();

        // @see https://css-tricks.com/snippets/jquery/make-an-jquery-hasattr/
        if ($details[0].hasAttribute('data-webform-details-nosave')) {
          return;
        }

        var name = Drupal.webformDetailsSaveGetName($details);
        if (!name) {
          return;
        }

        var open = ($details.attr('open') !== 'open') ? '1' : '0';
        localStorage.setItem(name, open);
      });

      // Initialize details open state via local storage.
      $('details', context).once('webform-details-save').each(function () {
        var $details = $(this);

        var name = Drupal.webformDetailsSaveGetName($details);
        if (!name) {
          return;
        }

        var open = localStorage.getItem(name);
        if (open === null) {
          return;
        }

        if (open === '1') {
          $details.attr('open', 'open');
        }
        else {
          $details.removeAttr('open');
        }
      });
    }

  };

  /**
   * Get the name used to store the state of details element.
   *
   * @param {jQuery} $details
   *   A details element.
   *
   * @return {string}
   *   The name used to store the state of details element.
   */
  Drupal.webformDetailsSaveGetName = function ($details) {
    if (!hasLocalStorage) {
      return '';
    }

    // Ignore details that are vertical tabs pane.
    if ($details.hasClass('vertical-tabs__pane')) {
      return '';
    }

    // Any details element not included a webform must have define its own id.
    var webformId = $details.attr('data-webform-element-id');
    if (webformId) {
      return 'Drupal.webform.' + webformId.replace('--', '.');
    }

    var detailsId = $details.attr('id');
    if (!detailsId) {
      return '';
    }

    var $form = $details.parents('form');
    if (!$form.length || !$form.attr('id')) {
      return '';
    }

    var formId = $form.attr('id');
    if (!formId) {
      return '';
    }

    // ISSUE: When Drupal renders a webform in a modal dialog it appends a unique
    // identifier to webform ids and details ids. (i.e. my-form--FeSFISegTUI)
    // WORKAROUND: Remove the unique id that delimited using double dashes.
    formId = formId.replace(/--.+?$/, '').replace(/-/g, '_');
    detailsId = detailsId.replace(/--.+?$/, '').replace(/-/g, '_');
    return 'Drupal.webform.' + formId + '.' + detailsId;
  };

})(jQuery, Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal, debounce) {
  var liveElement;
  var announcements = [];
  Drupal.behaviors.drupalAnnounce = {
    attach: function attach(context) {
      if (!liveElement) {
        liveElement = document.createElement('div');
        liveElement.id = 'drupal-live-announce';
        liveElement.className = 'visually-hidden';
        liveElement.setAttribute('aria-live', 'polite');
        liveElement.setAttribute('aria-busy', 'false');
        document.body.appendChild(liveElement);
      }
    }
  };
  function announce() {
    var text = [];
    var priority = 'polite';
    var announcement;
    var il = announcements.length;
    for (var i = 0; i < il; i++) {
      announcement = announcements.pop();
      text.unshift(announcement.text);
      if (announcement.priority === 'assertive') {
        priority = 'assertive';
      }
    }
    if (text.length) {
      liveElement.innerHTML = '';
      liveElement.setAttribute('aria-busy', 'true');
      liveElement.setAttribute('aria-live', priority);
      liveElement.innerHTML = text.join('\n');
      liveElement.setAttribute('aria-busy', 'false');
    }
  }
  Drupal.announce = function (text, priority) {
    announcements.push({
      text: text,
      priority: priority
    });
    return debounce(announce, 200)();
  };
})(Drupal, Drupal.debounce);;
/**
 * @file
 * JavaScript behaviors for details element.
 */

(function ($, Drupal) {

  'use strict';

  Drupal.webform = Drupal.webform || {};
  Drupal.webform.detailsToggle = Drupal.webform.detailsToggle || {};
  Drupal.webform.detailsToggle.options = Drupal.webform.detailsToggle.options || {};

  /**
   * Attach handler to toggle details open/close state.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.webformDetailsToggle = {
    attach: function (context) {
      $('.js-webform-details-toggle', context).once('webform-details-toggle').each(function () {
        var $form = $(this);
        var $tabs = $form.find('.webform-tabs');

        // Get only the main details elements and ignore all nested details.
        var selector = ($tabs.length) ? '.webform-tab' : '.js-webform-details-toggle, .webform-elements';
        var $details = $form.find('details').filter(function () {
          var $parents = $(this).parentsUntil(selector);
          return ($parents.find('details').length === 0);
        });

        // Toggle is only useful when there are two or more details elements.
        if ($details.length < 2) {
          return;
        }

        var options = $.extend({
          button: '<button type="button" class="webform-details-toggle-state"></button>'
        }, Drupal.webform.detailsToggle.options);

        // Create toggle buttons.
        var $toggle = $(options.button)
          .attr('title', Drupal.t('Toggle details widget state.'))
          .on('click', function (e) {
            // Get details that are not vertical tabs pane.
            var $details = $form.find('details:not(.vertical-tabs__pane)');
            var open;
            if (Drupal.webform.detailsToggle.isFormDetailsOpen($form)) {
              $details.removeAttr('open');
              open = 0;
            }
            else {
              $details.attr('open', 'open');
              open = 1;
            }
            Drupal.webform.detailsToggle.setDetailsToggleLabel($form);

            // Set the saved states for all the details elements.
            // @see webform.element.details.save.js
            if (Drupal.webformDetailsSaveGetName) {
              $details.each(function () {
                // Note: Drupal.webformDetailsSaveGetName checks if localStorage
                // exists and is enabled.
                // @see webform.element.details.save.js
                var name = Drupal.webformDetailsSaveGetName($(this));
                if (name) {
                  localStorage.setItem(name, open);
                }
              });
            }
          })
          .wrap('<div class="webform-details-toggle-state-wrapper"></div>')
          .parent();

        if ($tabs.length) {
          // Add toggle state before the tabs.
          $tabs.find('.item-list:first-child').eq(0).before($toggle);
        }
        else {
          // Add toggle state link to first details element.
          $details.eq(0).before($toggle);
        }

        Drupal.webform.detailsToggle.setDetailsToggleLabel($form);
      });
    }
  };

  /**
   * Determine if a webform's details are all opened.
   *
   * @param {jQuery} $form
   *   A webform.
   *
   * @return {boolean}
   *   TRUE if a webform's details are all opened.
   */
  Drupal.webform.detailsToggle.isFormDetailsOpen = function ($form) {
    return ($form.find('details[open]').length === $form.find('details').length);
  };

  /**
   * Set a webform's details toggle state widget label.
   *
   * @param {jQuery} $form
   *   A webform.
   */
  Drupal.webform.detailsToggle.setDetailsToggleLabel = function ($form) {
    var isOpen = Drupal.webform.detailsToggle.isFormDetailsOpen($form);

    var label = (isOpen) ? Drupal.t('Collapse all') : Drupal.t('Expand all');
    $form.find('.webform-details-toggle-state').html(label);

    var text = (isOpen) ? Drupal.t('All details have been expanded.') : Drupal.t('All details have been collapsed.');
    Drupal.announce(text);
  };

})(jQuery, Drupal);
;
/**
 * @file
 * JavaScript behaviors for message element integration.
 */

(function ($, Drupal) {

  'use strict';

  // Determine if local storage exists and is enabled.
  // This approach is copied from Modernizr.
  // @see https://github.com/Modernizr/Modernizr/blob/c56fb8b09515f629806ca44742932902ac145302/modernizr.js#L696-731
  var hasLocalStorage = (function () {
    try {
      localStorage.setItem('webform', 'webform');
      localStorage.removeItem('webform');
      return true;
    }
    catch (e) {
      return false;
    }
  }());

  // Determine if session storage exists and is enabled.
  // This approach is copied from Modernizr.
  // @see https://github.com/Modernizr/Modernizr/blob/c56fb8b09515f629806ca44742932902ac145302/modernizr.js#L696-731
  var hasSessionStorage = (function () {
    try {
      sessionStorage.setItem('webform', 'webform');
      sessionStorage.removeItem('webform');
      return true;
    }
    catch (e) {
      return false;
    }
  }());

  /**
   * Behavior for handler message close.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.webformMessageClose = {
    attach: function (context) {
      $(context).find('.js-webform-message--close').once('webform-message--close').each(function () {
        var $element = $(this);

        var id = $element.attr('data-message-id');
        var storage = $element.attr('data-message-storage');
        var effect = $element.attr('data-message-close-effect') || 'hide';
        switch (effect) {
          case 'slide': effect = 'slideUp'; break;

          case 'fade': effect = 'fadeOut'; break;
        }

        // Check storage status.
        if (isClosed($element, storage, id)) {
          return;
        }

        // Only show element if it's style is not set to 'display: none'
        // and it is not hidden via .js-webform-states-hidden.
        if ($element.attr('style') !== 'display: none;' && !$element.hasClass('js-webform-states-hidden')) {
          $element.show();
        }

        $element.find('.js-webform-message__link').on('click', function (event) {
          $element[effect]();
          setClosed($element, storage, id);
          $element.trigger('close');
          event.preventDefault();
        });
      });
    }
  };

  function isClosed($element, storage, id) {
    if (!id || !storage) {
      return false;
    }

    switch (storage) {
      case 'local':
        if (hasLocalStorage) {
          return localStorage.getItem('Drupal.webform.message.' + id) || false;
        }
        return false;

      case 'session':
        if (hasSessionStorage) {
          return sessionStorage.getItem('Drupal.webform.message.' + id) || false;
        }
        return false;

      default:
        return false;
    }
  }

  function setClosed($element, storage, id) {
    if (!id || !storage) {
      return;
    }

    switch (storage) {
      case 'local':
        if (hasLocalStorage) {
          localStorage.setItem('Drupal.webform.message.' + id, true);
        }
        break;

      case 'session':
        if (hasSessionStorage) {
          sessionStorage.setItem('Drupal.webform.message.' + id, true);
        }
        break;

      case 'user':
      case 'state':
      case 'custom':
        $.get($element.find('.js-webform-message__link').attr('href'));
        return true;
    }
  }

})(jQuery, Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, drupalSettings) {
  $(document).ready(function () {
    $.ajax({
      type: 'POST',
      cache: false,
      url: drupalSettings.statistics.url,
      data: drupalSettings.statistics.data
    });
  });
})(jQuery, Drupal, drupalSettings);;
!function(t,o){t.fn.doCheck=function(){var o=t(this).offset().top,a=o+t(this).outerHeight(),n=t(window).scrollTop(),r=n+t(window).height();return n<a&&o<r},t.fn.doLoad=function(){var o=t(this),a=o.find(".bg-loader img");a&&a.attr("src")&&o.find(".body-bg").css({"background-image":'url("'+a.attr("src")+'")'})},o.behaviors.bodyParagraph={attach:function(o){t(".paragraph-body",o).once("bodyParagraph").each(function(){var o=t(this);o.ready(function(){o.doCheck()&&o.once().doLoad()}),t(window).scroll(function(){o.doCheck()&&o.once().doLoad()})})}}}(jQuery,Drupal);;
!function(d){d.flexslider=function(u,e){var p=d(u),m=d.extend({},d.flexslider.defaults,e),s=m.namespace,r="ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch,a=r?"touchend":"click",v="vertical"===m.direction,f=m.reverse,g=0<m.itemWidth,h="fade"===m.animation,l=""!==m.asNavFor,c={};d.data(u,"flexslider",p),c={init:function(){p.animating=!1,p.currentSlide=m.startAt,p.animatingTo=p.currentSlide,p.atEnd=0===p.currentSlide||p.currentSlide===p.last,p.containerSelector=m.selector.substr(0,m.selector.search(" ")),p.slides=d(m.selector,p),p.container=d(p.containerSelector,p),p.count=p.slides.length,p.syncExists=0<d(m.sync).length,"slide"===m.animation&&(m.animation="swing"),p.prop=v?"top":"marginLeft",p.args={},p.manualPause=!1;var e=p;if(n=(n=(n=!m.video)&&!h)&&m.useCSS)e:{var t,n=document.createElement("div"),a=["perspectiveProperty","WebkitPerspective","MozPerspective","OPerspective","msPerspective"];for(t in a)if(void 0!==n.style[a[t]]){p.pfx=a[t].replace("Perspective","").toLowerCase(),p.prop="-"+p.pfx+"-transform",n=!0;break e}n=!1}e.transitions=n,""!==m.controlsContainer&&(p.controlsContainer=0<d(m.controlsContainer).length&&d(m.controlsContainer)),""!==m.manualControls&&(p.manualControls=0<d(m.manualControls).length&&d(m.manualControls)),m.randomize&&(p.slides.sort(function(){return Math.round(Math.random())-.5}),p.container.empty().append(p.slides)),p.doMath(),l&&c.asNav.setup(),p.setup("init"),m.controlNav&&c.controlNav.setup(),m.directionNav&&c.directionNav.setup(),m.keyboard&&(1===d(p.containerSelector).length||m.multipleKeyboard)&&d(document).bind("keyup",function(e){e=e.keyCode,p.animating||39!==e&&37!==e||(e=39===e?p.getTarget("next"):37===e&&p.getTarget("prev"),p.flexAnimate(e,m.pauseOnAction))}),m.mousewheel&&p.bind("mousewheel",function(e,t){e.preventDefault();e=t<0?p.getTarget("next"):p.getTarget("prev");p.flexAnimate(e,m.pauseOnAction)}),m.pausePlay&&c.pausePlay.setup(),m.slideshow&&(m.pauseOnHover&&p.hover(function(){p.manualPlay||p.manualPause||p.pause()},function(){p.manualPause||p.manualPlay||p.play()}),0<m.initDelay?setTimeout(p.play,m.initDelay):p.play()),r&&m.touch&&c.touch(),h&&!m.smoothHeight||d(window).bind("resize focus",c.resize),setTimeout(function(){m.start(p)},200)},asNav:{setup:function(){p.asNav=!0,p.animatingTo=Math.floor(p.currentSlide/p.move),p.currentItem=p.currentSlide,p.slides.removeClass(s+"active-slide").eq(p.currentItem).addClass(s+"active-slide"),p.slides.click(function(e){e.preventDefault();var t=(e=d(this)).index();d(m.asNavFor).data("flexslider").animating||e.hasClass("active")||(p.direction=p.currentItem<t?"next":"prev",p.flexAnimate(t,m.pauseOnAction,!1,!0,!0))})}},controlNav:{setup:function(){p.manualControls?c.controlNav.setupManual():c.controlNav.setupPaging()},setupPaging:function(){var e,t=1;if(p.controlNavScaffold=d('<ol class="'+s+"control-nav "+s+("thumbnails"===m.controlNav?"control-thumbs":"control-paging")+'"></ol>'),1<p.pagingCount)for(var n=0;n<p.pagingCount;n++)e="thumbnails"===m.controlNav?'<img src="'+p.slides.eq(n).attr("data-thumb")+'"/>':"<a>"+t+"</a>",p.controlNavScaffold.append("<li>"+e+"</li>"),t++;(p.controlsContainer?d(p.controlsContainer):p).append(p.controlNavScaffold),c.controlNav.set(),c.controlNav.active(),p.controlNavScaffold.delegate("a, img",a,function(e){e.preventDefault(),e=d(this);var t=p.controlNav.index(e);e.hasClass(s+"active")||(p.direction=t>p.currentSlide?"next":"prev",p.flexAnimate(t,m.pauseOnAction))}),r&&p.controlNavScaffold.delegate("a","click touchstart",function(e){e.preventDefault()})},setupManual:function(){p.controlNav=p.manualControls,c.controlNav.active(),p.controlNav.live(a,function(e){e.preventDefault(),e=d(this);var t=p.controlNav.index(e);e.hasClass(s+"active")||(t>p.currentSlide?p.direction="next":p.direction="prev",p.flexAnimate(t,m.pauseOnAction))}),r&&p.controlNav.live("click touchstart",function(e){e.preventDefault()})},set:function(){p.controlNav=d("."+s+"control-nav li "+("thumbnails"===m.controlNav?"img":"a"),p.controlsContainer||p)},active:function(){p.controlNav.removeClass(s+"active").eq(p.animatingTo).addClass(s+"active")},update:function(e,t){1<p.pagingCount&&"add"===e?p.controlNavScaffold.append(d("<li><a>"+p.count+"</a></li>")):(1===p.pagingCount?p.controlNavScaffold.find("li"):p.controlNav.eq(t).closest("li")).remove(),c.controlNav.set(),1<p.pagingCount&&p.pagingCount!==p.controlNav.length?p.update(t,e):c.controlNav.active()}},directionNav:{setup:function(){var e=d('<ul class="'+s+'direction-nav"><li><a class="'+s+'prev" href="#">'+m.prevText+'</a></li><li><a class="'+s+'next" href="#">'+m.nextText+"</a></li></ul>");p.controlsContainer?(d(p.controlsContainer).append(e),p.directionNav=d("."+s+"direction-nav li a",p.controlsContainer)):(p.append(e),p.directionNav=d("."+s+"direction-nav li a",p)),c.directionNav.update(),p.directionNav.bind(a,function(e){e.preventDefault(),e=d(this).hasClass(s+"next")?p.getTarget("next"):p.getTarget("prev"),p.flexAnimate(e,m.pauseOnAction)}),r&&p.directionNav.bind("click touchstart",function(e){e.preventDefault()})},update:function(){var e=s+"disabled";1===p.pagingCount?p.directionNav.addClass(e):m.animationLoop?p.directionNav.removeClass(e):0===p.animatingTo?p.directionNav.removeClass(e).filter("."+s+"prev").addClass(e):p.animatingTo===p.last?p.directionNav.removeClass(e).filter("."+s+"next").addClass(e):p.directionNav.removeClass(e)}},pausePlay:{setup:function(){var e=d('<div class="'+s+'pauseplay"><a></a></div>');p.controlsContainer?(p.controlsContainer.append(e),p.pausePlay=d("."+s+"pauseplay a",p.controlsContainer)):(p.append(e),p.pausePlay=d("."+s+"pauseplay a",p)),c.pausePlay.update(m.slideshow?s+"pause":s+"play"),p.pausePlay.bind(a,function(e){e.preventDefault(),d(this).hasClass(s+"pause")?(p.manualPause=!0,p.manualPlay=!1,p.pause()):(p.manualPause=!1,p.manualPlay=!0,p.play())}),r&&p.pausePlay.bind("click touchstart",function(e){e.preventDefault()})},update:function(e){"play"===e?p.pausePlay.removeClass(s+"pause").addClass(s+"play").text(m.playText):p.pausePlay.removeClass(s+"play").addClass(s+"pause").text(m.pauseText)}},touch:function(){function n(e){l=v?i-e.touches[0].pageY:i-e.touches[0].pageX,(!(d=v?Math.abs(l)<Math.abs(e.touches[0].pageX-o):Math.abs(l)<Math.abs(e.touches[0].pageY-o))||500<Number(new Date)-c)&&(e.preventDefault(),!h&&p.transitions&&(m.animationLoop||(l/=0===p.currentSlide&&l<0||p.currentSlide===p.last&&0<l?Math.abs(l)/r+2:1),p.setProps(s+l,"setTouch")))}function a(){var e,t;u.removeEventListener("touchmove",n,!1),p.animatingTo!==p.currentSlide||d||null===l||(t=0<(e=f?-l:l)?p.getTarget("next"):p.getTarget("prev"),p.canAdvance(t)&&(Number(new Date)-c<550&&50<Math.abs(e)||Math.abs(e)>r/2)?p.flexAnimate(t,m.pauseOnAction):h||p.flexAnimate(p.currentSlide,m.pauseOnAction,!0)),u.removeEventListener("touchend",a,!1),s=l=o=i=null}var i,o,s,r,l,c,d=!1;u.addEventListener("touchstart",function(e){p.animating?e.preventDefault():1===e.touches.length&&(p.pause(),r=v?p.h:p.w,c=Number(new Date),s=g&&f&&p.animatingTo===p.last?0:g&&f?p.limit-(p.itemW+m.itemMargin)*p.move*p.animatingTo:g&&p.currentSlide===p.last?p.limit:g?(p.itemW+m.itemMargin)*p.move*p.currentSlide:f?(p.last-p.currentSlide+p.cloneOffset)*r:(p.currentSlide+p.cloneOffset)*r,i=v?e.touches[0].pageY:e.touches[0].pageX,o=v?e.touches[0].pageX:e.touches[0].pageY,u.addEventListener("touchmove",n,!1),u.addEventListener("touchend",a,!1))},!1)},resize:function(){!p.animating&&p.is(":visible")&&(g||p.doMath(),h?c.smoothHeight():g?(p.slides.width(p.computedW),p.update(p.pagingCount),p.setProps()):v?(p.viewport.height(p.h),p.setProps(p.h,"setTotal")):(m.smoothHeight&&c.smoothHeight(),p.newSlides.width(p.computedW),p.setProps(p.computedW,"setTotal")))},smoothHeight:function(e){var t;v&&!h||(t=h?p:p.viewport,e?t.animate({height:p.slides.eq(p.animatingTo).height()},e):t.height(p.slides.eq(p.animatingTo).height()))},sync:function(e){var t=d(m.sync).data("flexslider"),n=p.animatingTo;switch(e){case"animate":t.flexAnimate(n,m.pauseOnAction,!1,!0);break;case"play":t.playing||t.asNav||t.play();break;case"pause":t.pause()}}},p.flexAnimate=function(e,t,n,a,i){if(l&&1===p.pagingCount&&(p.direction=p.currentItem<e?"next":"prev"),!p.animating&&(p.canAdvance(e,i)||n)&&p.is(":visible")){if(l&&a){if(n=d(m.asNavFor).data("flexslider"),p.atEnd=0===e||e===p.count-1,n.flexAnimate(e,!0,!1,!0,i),p.direction=p.currentItem<e?"next":"prev",n.direction=p.direction,Math.ceil((e+1)/p.visible)-1===p.currentSlide||0===e)return p.currentItem=e,p.slides.removeClass(s+"active-slide").eq(e).addClass(s+"active-slide"),!1;p.currentItem=e,p.slides.removeClass(s+"active-slide").eq(e).addClass(s+"active-slide"),e=Math.floor(e/p.visible)}var o;p.animating=!0,p.animatingTo=e,m.before(p),t&&p.pause(),p.syncExists&&!i&&c.sync("animate"),m.controlNav&&c.controlNav.active(),g||p.slides.removeClass(s+"active-slide").eq(e).addClass(s+"active-slide"),p.atEnd=0===e||e===p.last,m.directionNav&&c.directionNav.update(),e===p.last&&(m.end(p),m.animationLoop||p.pause()),h?r?(p.slides.eq(p.currentSlide).css({opacity:0,zIndex:1}),p.slides.eq(e).css({opacity:1,zIndex:2}),p.slides.unbind("webkitTransitionEnd transitionend"),p.slides.eq(p.currentSlide).bind("webkitTransitionEnd transitionend",function(){m.after(p)}),p.animating=!1,p.currentSlide=p.animatingTo):(p.slides.eq(p.currentSlide).fadeOut(m.animationSpeed,m.easing),p.slides.eq(e).fadeIn(m.animationSpeed,m.easing,p.wrapup)):(o=v?p.slides.filter(":first").height():p.computedW,e=g?(e=m.itemWidth>p.w?2*m.itemMargin:m.itemMargin,(e=(p.itemW+e)*p.move*p.animatingTo)>p.limit&&1!==p.visible?p.limit:e):0===p.currentSlide&&e===p.count-1&&m.animationLoop&&"next"!==p.direction?f?(p.count+p.cloneOffset)*o:0:p.currentSlide===p.last&&0===e&&m.animationLoop&&"prev"!==p.direction?f?0:(p.count+1)*o:f?(p.count-1-e+p.cloneOffset)*o:(e+p.cloneOffset)*o,p.setProps(e,"",m.animationSpeed),p.transitions?(m.animationLoop&&p.atEnd||(p.animating=!1,p.currentSlide=p.animatingTo),p.container.unbind("webkitTransitionEnd transitionend"),p.container.bind("webkitTransitionEnd transitionend",function(){p.wrapup(o)})):p.container.animate(p.args,m.animationSpeed,m.easing,function(){p.wrapup(o)})),m.smoothHeight&&c.smoothHeight(m.animationSpeed)}},p.wrapup=function(e){h||g||(0===p.currentSlide&&p.animatingTo===p.last&&m.animationLoop?p.setProps(e,"jumpEnd"):p.currentSlide===p.last&&0===p.animatingTo&&m.animationLoop&&p.setProps(e,"jumpStart")),p.animating=!1,p.currentSlide=p.animatingTo,m.after(p)},p.animateSlides=function(){p.animating||p.flexAnimate(p.getTarget("next"))},p.pause=function(){clearInterval(p.animatedSlides),p.playing=!1,m.pausePlay&&c.pausePlay.update("play"),p.syncExists&&c.sync("pause")},p.play=function(){p.animatedSlides=setInterval(p.animateSlides,m.slideshowSpeed),p.playing=!0,m.pausePlay&&c.pausePlay.update("pause"),p.syncExists&&c.sync("play")},p.canAdvance=function(e,t){var n=l?p.pagingCount-1:p.last;return!!t||(l&&p.currentItem===p.count-1&&0===e&&"prev"===p.direction||(!l||0!==p.currentItem||e!==p.pagingCount-1||"next"===p.direction)&&((e!==p.currentSlide||l)&&(!!m.animationLoop||(!p.atEnd||0!==p.currentSlide||e!==n||"next"===p.direction)&&(!p.atEnd||p.currentSlide!==n||0!==e||"next"!==p.direction))))},p.getTarget=function(e){return"next"===(p.direction=e)?p.currentSlide===p.last?0:p.currentSlide+1:0===p.currentSlide?p.last:p.currentSlide-1},p.setProps=function(e,t,n){var a=e||(p.itemW+m.itemMargin)*p.move*p.animatingTo,i=-1*function(){if(g)return"setTouch"===t?e:f&&p.animatingTo===p.last?0:f?p.limit-(p.itemW+m.itemMargin)*p.move*p.animatingTo:p.animatingTo===p.last?p.limit:a;switch(t){case"setTotal":return f?(p.count-1-p.currentSlide+p.cloneOffset)*e:(p.currentSlide+p.cloneOffset)*e;case"setTouch":return e;case"jumpEnd":return f?e:p.count*e;case"jumpStart":return f?p.count*e:e;default:return e}}()+"px";p.transitions&&(i=v?"translate3d(0,"+i+",0)":"translate3d("+i+",0,0)",p.container.css("-"+p.pfx+"-transition-duration",n=void 0!==n?n/1e3+"s":"0s")),p.args[p.prop]=i,!p.transitions&&void 0!==n||p.container.css(p.args)},p.setup=function(e){var t,n;h?(p.slides.css({width:"100%",float:"left",marginRight:"-100%",position:"relative"}),"init"===e&&(r?p.slides.css({opacity:0,display:"block",webkitTransition:"opacity "+m.animationSpeed/1e3+"s ease",zIndex:1}).eq(p.currentSlide).css({opacity:1,zIndex:2}):p.slides.eq(p.currentSlide).fadeIn(m.animationSpeed,m.easing)),m.smoothHeight&&c.smoothHeight()):("init"===e&&(p.viewport=d('<div class="'+s+'viewport"></div>').css({overflow:"hidden",position:"relative"}).appendTo(p).append(p.container),p.cloneCount=0,p.cloneOffset=0,f&&(n=d.makeArray(p.slides).reverse(),p.slides=d(n),p.container.empty().append(p.slides))),m.animationLoop&&!g&&(p.cloneCount=2,p.cloneOffset=1,"init"!==e&&p.container.find(".clone").remove(),p.container.append(p.slides.first().clone().addClass("clone")).prepend(p.slides.last().clone().addClass("clone"))),p.newSlides=d(m.selector,p),t=f?p.count-1-p.currentSlide+p.cloneOffset:p.currentSlide+p.cloneOffset,v&&!g?(p.container.height(200*(p.count+p.cloneCount)+"%").css("position","absolute").width("100%"),setTimeout(function(){p.newSlides.css({display:"block"}),p.doMath(),p.viewport.height(p.h),p.setProps(t*p.h,"init")},"init"===e?100:0)):(p.container.width(200*(p.count+p.cloneCount)+"%"),p.setProps(t*p.computedW,"init"),setTimeout(function(){p.doMath(),p.newSlides.css({width:p.computedW,float:"left",display:"block"}),m.smoothHeight&&c.smoothHeight()},"init"===e?100:0))),g||p.slides.removeClass(s+"active-slide").eq(p.currentSlide).addClass(s+"active-slide")},p.doMath=function(){var e=p.slides.first(),t=m.itemMargin,n=m.minItems,a=m.maxItems;p.w=p.width(),p.h=e.height(),p.boxPadding=e.outerWidth()-e.width(),g?(p.itemT=m.itemWidth+t,p.minW=n?n*p.itemT:p.w,p.maxW=a?a*p.itemT:p.w,p.itemW=p.minW>p.w?(p.w-t*n)/n:p.maxW<p.w?(p.w-t*a)/a:m.itemWidth>p.w?p.w:m.itemWidth,p.visible=Math.floor(p.w/(p.itemW+t)),p.move=0<m.move&&m.move<p.visible?m.move:p.visible,p.pagingCount=Math.ceil((p.count-p.visible)/p.move+1),p.last=p.pagingCount-1,p.limit=1===p.pagingCount?0:m.itemWidth>p.w?(p.itemW+2*t)*p.count-p.w-t:(p.itemW+t)*p.count-p.w-t):(p.itemW=p.w,p.pagingCount=p.count,p.last=p.count-1),p.computedW=p.itemW-p.boxPadding},p.update=function(e,t){p.doMath(),g||(e<p.currentSlide?p.currentSlide+=1:e<=p.currentSlide&&0!==e&&--p.currentSlide,p.animatingTo=p.currentSlide),m.controlNav&&!p.manualControls&&("add"===t&&!g||p.pagingCount>p.controlNav.length?c.controlNav.update("add"):("remove"===t&&!g||p.pagingCount<p.controlNav.length)&&(g&&p.currentSlide>p.last&&(--p.currentSlide,--p.animatingTo),c.controlNav.update("remove",p.last))),m.directionNav&&c.directionNav.update()},p.addSlide=function(e,t){e=d(e);p.count+=1,p.last=p.count-1,v&&f?void 0!==t?p.slides.eq(p.count-t).after(e):p.container.prepend(e):void 0!==t?p.slides.eq(t).before(e):p.container.append(e),p.update(t,"add"),p.slides=d(m.selector+":not(.clone)",p),p.setup(),m.added(p)},p.removeSlide=function(e){var t=isNaN(e)?p.slides.index(d(e)):e;--p.count,p.last=p.count-1,(isNaN(e)?d(e,p.slides):v&&f?p.slides.eq(p.last):p.slides.eq(e)).remove(),p.doMath(),p.update(t,"remove"),p.slides=d(m.selector+":not(.clone)",p),p.setup(),m.removed(p)},c.init()},d.flexslider.defaults={namespace:"flex-",selector:".slides > li",animation:"fade",easing:"swing",direction:"horizontal",reverse:!1,animationLoop:!0,smoothHeight:!1,startAt:0,slideshow:!0,slideshowSpeed:7e3,animationSpeed:600,initDelay:0,randomize:!1,pauseOnAction:!0,pauseOnHover:!1,useCSS:!0,touch:!0,video:!1,controlNav:!0,directionNav:!0,prevText:"Previous",nextText:"Next",keyboard:!0,multipleKeyboard:!1,mousewheel:!1,pausePlay:!1,pauseText:"Pause",playText:"Play",controlsContainer:"",manualControls:"",sync:"",asNavFor:"",itemWidth:0,itemMargin:0,minItems:0,maxItems:0,move:0,start:function(){},before:function(){},after:function(){},end:function(){},added:function(){},removed:function(){}},d.fn.flexslider=function(n){if("object"==typeof(n=void 0===n?{}:n))return this.each(function(){var e=d(this),t=e.find(n.selector||".slides > li");1===t.length?(t.fadeIn(400),n.start&&n.start(e)):null==e.data("flexslider")&&new d.flexslider(this,n)});var e=d(this).data("flexslider");switch(n){case"play":e.play();break;case"pause":e.pause();break;case"next":e.flexAnimate(e.getTarget("next"),!0);break;case"prev":case"previous":e.flexAnimate(e.getTarget("prev"),!0);break;default:"number"==typeof n&&e.flexAnimate(n,!0)}}}(jQuery);;
$=jQuery;var win=window;!function(){function e(){$(".video-container").each(function(){var t=$(this),e=t.parent().width(),i=e/1.77;if(0<t.parent(".youtube-container").length)return!0;t.css({height:i,width:e}),t.closest(".career-feature").length&&767<$(window).width()&&t.css({height:e/2.5,width:"75%"})})}$(".layout-container").each(function(){$(this).find(["iframe[src^='http://player.vimeo.com']","iframe[src^='http://www.youtube.com']","iframe[src^='https://www.youtube.com']","object","embed"].join(",")).each(function(){var t=$(this);if(0<t.parent(".youtube-container").length)return!0;t.css({height:"100%",width:"100%"}).removeAttr("height").removeAttr("width").wrap('<div class="video-container"></div>'),e()})}),$(win).on("resize",function(){var t=win.setTimeout(function(){win.clearTimeout(t),e()},30)})}();;
!function(i,t){"use strict";i.behaviors.FlexSliderInit={attach:function(i,e){for(var o=[{slider:t(".flexslider"),options:{width:"100%",height:"457px",responsive:!0,responsiveUnder:940,animation:"slide",direction:"horizontal",animationLoop:!1,controlNav:!1,directionNav:!1,slideshow:!1,slideshowSpeed:6e3,animationSpeed:600,randomize:!1,sync:".flexslider-controls"}},{slider:t("#career-slideshow"),options:{width:"100%",height:"100%",responsive:!1,responsiveUnder:940,animation:"fade",direction:"horizontal",animationLoop:!0,controlNav:!1,directionNav:!1,slideshow:!0,slideshowSpeed:3e3,animationSpeed:400,randomize:!1,smoothHeight:!1}}],n=0;n<o.length;n++)this.initialize(o[n].slider,o[n].options)},initialize:function(i,e,o){i=t(i,o);i.length&&i.flexslider(e)}},i.behaviors.FlexSlider={attach:function(i,e){this.flexControls()},flexControls:function(){var i={width:"890px",height:"167px",responsive:!0,responsiveUnder:940,animation:"slide",direction:"horizontal",animationLoop:!1,controlNav:!1,directionNav:!0,slideshow:!1,slideshowSpeed:6e3,animationSpeed:600,itemWidth:164,itemMargin:15,asNavFor:".flexslider"},e=t(".flexslider-controls");e.length&&t(win).load(function(){e.flexslider(i)})}}}(Drupal,jQuery,drupalSettings);;
!function(o,e){"use strict";o.behaviors.bfasModal={attach:function(o){e(".modal",o).once("bfasModal").each(function(){var o=e(this),d=o.find(".modal-trigger"),n=o.find(".modal-content");d.click(function(){d.attr("href","javascript:void(0)"),0==e(".modal-open").length&&(e("body").append(n),n.wrap('<div class="modal-open"></div>'),n.append('<div class="modal-close">&#xf00d;</div'),document.body.style.overflow="hidden",document.body.scroll="no",document.body.style.paddingRight="15px")}),e("body").once(".modal-open").on("click",".modal-open",function(){e(".modal-open").length&&(o.append(n),e(".modal-open").remove(),document.body.style.overflow="scroll",document.body.scroll="yes",document.body.style.paddingRight="0px")})})}}}(Drupal,jQuery,drupalSettings);;
!function(e){e(".menu-featured")[0]&&e(".menu-featured").eq(0).css("margin-top","2.5rem")}(jQuery),function(i){i(document).ready(function(){var e=i(".active.depth-1 > a"),t=i(".active.depth-1 > a").attr("href"),a=i(".active.depth-1 > a").text(),n=i(".active.depth-1 > .menu > .menu-inner");0<i(".active.depth-1").children(".menu").length?i("#block-mainnavigation .active.depth-1 > a").hasClass("is-active")||i(n).append(`<li class="menu-item depth-2"><a class="menu-backto" href="${t}">${a}</a></li>`):(i(e).css("pointer-events","none"),i(e).addClass("no-after"))})}(jQuery);;
/*! js-cookie v3.0.1 | MIT */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,o=e.Cookies=t();o.noConflict=function(){return e.Cookies=n,o}}())}(this,(function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)e[o]=n[o]}return e}return function t(n,o){function r(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var c="";for(var u in i)i[u]&&(c+="; "+u,!0!==i[u]&&(c+="="+i[u].split(";")[0]));return document.cookie=t+"="+n.write(r,t)+c}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],o={},r=0;r<t.length;r++){var i=t[r].split("="),c=i.slice(1).join("=");try{var u=decodeURIComponent(i[0]);if(o[u]=n.read(c,u),e===u)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){r(t,"",e({},n,{expires:-1}))},withAttributes:function(n){return t(this.converter,e({},this.attributes,n))},withConverter:function(n){return t(e({},this.converter,n),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(n)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}));
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function ($, Drupal, cookies) {
  var deprecatedMessageSuffix = "is deprecated in Drupal 9.0.0 and will be removed in Drupal 10.0.0. Use the core/js-cookie library instead. See https://www.drupal.org/node/3104677";
  var isFunction = function isFunction(obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
  };
  var parseCookieValue = function parseCookieValue(value, parseJson) {
    if (value.indexOf('"') === 0) {
      value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }
    try {
      value = decodeURIComponent(value.replace(/\+/g, ' '));
      return parseJson ? JSON.parse(value) : value;
    } catch (e) {}
  };
  var reader = function reader(cookieValue, cookieName, converter, readUnsanitized, parseJson) {
    var value = readUnsanitized ? cookieValue : parseCookieValue(cookieValue, parseJson);
    if (converter !== undefined && isFunction(converter)) {
      return converter(value, cookieName);
    }
    return value;
  };
  $.cookie = function (key) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    Drupal.deprecationError({
      message: "jQuery.cookie() ".concat(deprecatedMessageSuffix)
    });
    if (value !== undefined && !isFunction(value)) {
      var attributes = _objectSpread(_objectSpread({}, $.cookie.defaults), options);
      if (typeof attributes.expires === 'string' && attributes.expires !== '') {
        attributes.expires = new Date(attributes.expires);
      }
      var cookieSetter = cookies.withConverter({
        write: function write(cookieValue) {
          return encodeURIComponent(cookieValue);
        }
      });
      value = $.cookie.json && !$.cookie.raw ? JSON.stringify(value) : String(value);
      return cookieSetter.set(key, value, attributes);
    }
    var userProvidedConverter = value;
    var cookiesShim = cookies.withConverter({
      read: function read(cookieValue, cookieName) {
        return reader(cookieValue, cookieName, userProvidedConverter, $.cookie.raw, $.cookie.json);
      }
    });
    if (key !== undefined) {
      return cookiesShim.get(key);
    }
    var results = cookiesShim.get();
    Object.keys(results).forEach(function (resultKey) {
      if (results[resultKey] === undefined) {
        delete results[resultKey];
      }
    });
    return results;
  };
  $.cookie.defaults = _objectSpread({
    path: ''
  }, cookies.defaults);
  $.cookie.json = false;
  $.cookie.raw = false;
  $.removeCookie = function (key, options) {
    Drupal.deprecationError({
      message: "jQuery.removeCookie() ".concat(deprecatedMessageSuffix)
    });
    cookies.remove(key, _objectSpread(_objectSpread({}, $.cookie.defaults), options));
    return !cookies.get(key);
  };
})(jQuery, Drupal, window.Cookies);;
!function(e,a){e.behaviors.alertMessage={attach:function(e){a(".block-global-alert",e).once("alertMessage").each(function(){var i=a(this);"true"!=a.cookie("hideAlert")&&(i.addClass("visible"),i.find(".alert-dismiss").click(function(){i.removeClass("visible");var e=new Date;e.setTime(e.getTime()+864e5),a.cookie("hideAlert","true",{expires:e})}))})}}}(Drupal,jQuery);;
!function(e,C){"use strict";e.behaviors.headerToggle={attach:function(e){C(".site-header",e).once("headerToggle").each(function(){var e,s=C(".site-header"),d=C(".layout-container"),o=C("footer"),a=(C("#copy"),C(".header-open")),n=C(".header-close"),l=C(".menu-main"),i=C(".menu-main .depth-1 > a"),t=C(".menu-main .depth-1.active > .menu"),c=C(".strut-sticky"),r=null;C(window).resize(function(){C(window).width()}),a.on("click",function(e){1==s.hasClass("closed")&&(d.addClass("closed"),d.removeClass("opened"),o.addClass("closed"),o.removeClass("opened"),l.addClass("closed"),l.removeClass("opened"),s.addClass("opened"),s.removeClass("closed"))}),n.on("click",function(e){1==s.hasClass("opened")&&(d.addClass("opened"),d.removeClass("closed"),o.addClass("opened"),o.removeClass("closed"),l.addClass("opened"),l.removeClass("closed"),s.addClass("closed"),s.removeClass("opened"))}),l.length&&C(".menu-main .depth-1").hasClass("active")&&(l.show(),i.on("click",function(e){e.preventDefault(),e.stopPropagation(),!0!==l.hasClass("opened")?(l.addClass("opened"),C(window).width()<992&&(r=C(window).width()-t.outerWidth(),t.css("padding-right",r))):(C(window).width()<992&&(r=C(window).width()-t.outerWidth(),t.css("padding-right",r)),l.removeClass("opened"))}),e=l.offset().top,C(window).scroll(function(){C(window).scrollTop()>=e?(s.addClass("fixed"),l.addClass("fixed"),c.addClass("fixed")):(s.removeClass("fixed"),l.removeClass("fixed"),c.removeClass("fixed"))}),C(document).click(e=>{C(e.target).closest("#mm").length||l.removeClass("opened")}))})}}}(Drupal,jQuery,drupalSettings);;
/**
 * @file
 * Adds Google Custom Search Watermark.
 */

(function ($, Drupal, drupalSettings) {
  'use strict';

  Drupal.behaviors.googleCSECustomSearch = {
    attach: function (context, settings) {
      if (!drupalSettings.googleCSE.isDefault) {
        return;
      }
      var getWatermarkBackground = function (value) {
        var googleCSEBaseUrl = 'https://www.google.com/cse/intl/';
        var googleCSEImageUrl = 'https://bestfriends.org/images/google_custom_search_watermark.gif';
        var language = drupalSettings.googleCSE.language + '/';
        return value ? '' : ' url(' + googleCSEBaseUrl + language + googleCSEImageUrl + ') left no-repeat';
      };
      var onFocus = function (e) {
        $(e.target).css('background', '#ffffff');
      };
      var onBlur = function (e) {
        $(e.target).css('background', '#ffffff' + getWatermarkBackground($(e.target).val()));
      };
      var googleCSEWatermark = function (context, query) {
        var form = jQuery(context);
        var searchInputs = $('[data-drupal-selector="' + query + '"]', form);
        if (navigator.platform === 'Win32') {
          searchInputs.css('style', 'border: 1px solid #7e9db9; padding: 2px;');
        }
        searchInputs.blur(onBlur);
        searchInputs.focus(onFocus);
        searchInputs.each(function () {
          var event = {};
          event.target = this;
          onBlur(event);
        });
      };

      googleCSEWatermark('[data-drupal-selector="search-block-form"] [data-drupal-form-fields="edit-keys--2"]', 'edit-keys');
      googleCSEWatermark('[data-drupal-selector="search-block-form"] [data-drupal-form-fields="edit-keys"]', 'edit-keys');
      googleCSEWatermark('[data-drupal-selector="search-form"]', 'edit-keys');
      googleCSEWatermark('[data-drupal-selector="google-cse-search-box-form"]', 'edit-query');
    }
  };
})(jQuery, Drupal, drupalSettings);
;
!function(e,n){"use strict";e.behaviors.SearchForm={attach:function(e){var o=n(".search-block-form"),c=n('.search-block-form input[type="submit"]'),r=n(".search-block-form .close"),a=n('.search-block-form input[type="search"]'),t=n("#block-tertiarymenu");c.on("click",function(e){!0!==o.hasClass("opened")&992<n(window).width()&&(o.addClass("opened"),a.attr("placeholder","Search"),t.hide(),e.preventDefault())}),r.on("click",function(){o.removeClass("opened"),t.show()})}}}(Drupal,jQuery);;
